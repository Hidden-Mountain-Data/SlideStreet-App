generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model DataUsages {
  dataUsageId Int       @id @default(autoincrement()) @map("data_usage_id")
  dateId      Int       @map("date_id")
  routerId    Int?      @map("router_id")
  simId       Int       @map("sim_id")
  userId      Int       @map("user_id")
  dataUsage   BigInt    @map("data_usage")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  date        Dates     @relation("DataUsageDate", fields: [dateId], references: [dateId])
  router      Routers?  @relation("DataUsageRouter", fields: [routerId], references: [routerId])
  sim         Sims      @relation("DataUsageSim", fields: [simId], references: [simId])
  user        User      @relation("DataUsageUser", fields: [userId], references: [userId])

  @@index([dateId])
  @@index([simId])
  @@index([userId])
  @@map("data_usages")
}

model Dates {
  dateId           Int          @id @default(autoincrement()) @map("date_id")
  date             DateTime     @unique
  day              Int
  dayOfWeek        Int          @map("day_of_week")
  dayOfYear        Int          @map("day_of_year")
  weekOfYear       Int          @map("week_of_year")
  month            Int
  quarter          Int
  year             Int
  dataUsageEntries DataUsages[] @relation("DataUsageDate")

  @@index([date])
  @@map("dates")
}

model Sims {
  simId            Int          @id @default(autoincrement()) @map("sim_id")
  userId           Int          @map("user_id")
  routerId         Int?         @map("router_id")
  eid              String?
  iccid            String       @unique @db.VarChar(50)
  active           Boolean?
  ipAddress        String?      @map("ip_address") @db.VarChar(50)
  status           SimStatus    @default(ACTIVE)
  embedded         Boolean?     @default(true)
  notes            String?      @db.VarChar(500)
  imei             String?      @db.VarChar(50)
  dataUsageEntries DataUsages[] @relation("DataUsageSim")
  router           Routers?     @relation("RouterSims", fields: [routerId], references: [routerId])
  user             User?        @relation("UserSim", fields: [userId], references: [userId])
  plan             Plan?        @relation("PlanSim", fields: [planId], references: [planId])
  planId           String?      @map("plan_id")
  carrier          Carrier?     @relation("CarrierSim", fields: [carrierId], references: [carrierId])
  carrierId        String?      @map("carrier_id")
  clientPlan       ClientPlan?  @relation("ClientPlanSim", fields: [clientPlanId], references: [clientPlanId])
  clientPlanId     String?      @map("client_plan_id")
  account          Account?     @relation("AccountSim", fields: [accountId], references: [accountId])
  accountId        String?      @map("account_id")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  deletedAt        DateTime?    @map("deleted_at")

  @@index([simId])
  @@index([userId])
  @@index([routerId])
  @@index([planId])
  @@map("sims")
}

model Account {
  accountId   String       @id @default(nanoid())
  name        String
  address     Address?     @relation(fields: [addressId], references: [addressId])
  addressId   Int?         @unique
  clientPlans ClientPlan[] @relation("AccountClientPlan")
  sims        Sims[]       @relation("AccountSim")
}

model Carrier {
  carrierId   String    @id @default(nanoid()) @map("carrier_id")
  name        String    @map("name")
  tagLine     String?   @map("tag_line")
  description String?   @map("description")
  logo        String?   @map("logo")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  plans       Plan[]    @relation("CarrierPlan")
  sims        Sims[]    @relation("CarrierSim")
  tags        Tag[]
}

model ClientPlan {
  clientPlanId          String   @id @default(nanoid()) @map("client_plan_id")
  clientCost            Decimal? @map("client_cost")
  clientCostUnit        String?  @map("client_cost_unit")
  clientOverageCost     Decimal? @map("client_overage_cost")
  clientOverageUnit     String?  @map("client_overage_unit")
  clientDataUnit        String?  @map("client_data_unit")
  clientDataAmount      Decimal? @map("client_data_amount")
  clientSMSCost         Decimal? @map("client_sms_cost")
  clientPlanName        String?  @map("client_plan_name")
  clientPlanType        String?  @map("client_plan_type")
  clientPlanDescription String?  @map("client_plan_description")
  sim                   Sims[]   @relation("ClientPlanSim")
  user                  User?    @relation("UserClientPlan", fields: [userId], references: [userId])
  userId                Int?     @map("user_id")
  slidePlan             Plan?    @relation("ClientPlan", fields: [slidePlanId], references: [planId])
  slidePlanId           String?  @map("slide_plan_id")
  account               Account? @relation("AccountClientPlan", fields: [accountId], references: [accountId])
  accountId             String?  @map("account_id")
}

model Plan {
  planId           String       @id @default(nanoid()) @map("plan_id")
  carrierUuid      String       @unique @map("carrier_uuid")
  carrierName      String       @map("carrier_name")
  slideCost        Decimal      @map("slide_cost")
  slideCostUnit    String       @map("slide_cost_unit")
  slideOverageCost Decimal      @map("slide_overage_cost")
  slideOverageUnit String       @map("slide_overage_unit")
  slideDataCost    Decimal      @map("slide_data_cost")
  slideDataUnit    String       @map("slide_data_unit")
  slideDataAmount  Decimal      @map("slide_data_amount")
  slideSmsPrice    Decimal?     @map("slide_sms_price")
  network          String?      @map("network")
  planName         String       @map("plan_name")
  planDescription  String?      @map("plan_description")
  networkType      String       @map("network_type")
  technology       String       @map("technology")
  user             User?        @relation("UserPlan", fields: [userId], references: [userId])
  userId           Int?         @map("user_id")
  sim              Sims[]       @relation("PlanSim")
  carrier          Carrier      @relation("CarrierPlan", fields: [carrierId], references: [carrierId])
  carrierId        String       @map("carrier_id")
  clientPlans      ClientPlan[] @relation("ClientPlan")

  @@index([userId])
}

model Tag {
  tagId    String    @id @default(nanoid()) @map("tag_id")
  name     String    @map("name")
  icon     String    @map("icon")
  color    String    @map("color")
  carriers Carrier[]
}

model Routers {
  routerId         Int              @id @default(autoincrement()) @map("router_id")
  simId            Int?             @map("sim_id")
  userId           Int              @map("user_id")
  name             String?          @db.VarChar(200)
  notes            String?          @db.VarChar(500)
  imei             String           @db.VarChar(50)
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @updatedAt @map("updated_at")
  deletedAt        DateTime?        @map("deleted_at")
  dataUsageEntries DataUsages[]     @relation("DataUsageRouter")
  routerLocation   RouterLocations?
  sims             Sims[]           @relation("RouterSims")
  user             User             @relation("UserRouter", fields: [userId], references: [userId])

  @@index([userId])
  @@map("routers")
}

model User {
  userId           Int          @id @default(autoincrement())
  addressId        String?      @unique @map("address_id") @db.VarChar(50)
  imageUuid        String?      @map("image_uuid") @db.VarChar(36)
  stripeCustomerId String?      @map("stripe_customer_id") @db.VarChar(200)
  email            String       @unique @db.VarChar(100)
  password         String       @db.VarChar(200)
  token            String?      @db.VarChar(200)
  firstName        String?      @map("first_name") @db.VarChar(50)
  lastName         String?      @map("last_name") @db.VarChar(50)
  fullName         String?      @map("full_name") @db.VarChar(100)
  phone            String?      @db.VarChar(20)
  refreshToken     String?      @map("refresh_token") @db.VarChar(200)
  apiKey           String?      @map("api_key") @db.VarChar(200)
  createdAt        DateTime     @default(now()) @map("created_at")
  deletedAt        DateTime?    @map("deleted_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  isActive         Boolean      @default(false) @map("is_active")
  imageUrl         String?      @map("image_url") @db.VarChar(250)
  role             Roles?       @default(USER)
  address          Address?     @relation("UserAddress")
  dataUsages       DataUsages[] @relation("DataUsageUser")
  routers          Routers[]    @relation("UserRouter")
  sims             Sims[]       @relation("UserSim")
  clientPlans      ClientPlan[] @relation("UserClientPlan")
  plans            Plan[]       @relation("UserPlan")

  @@index([email], map: "user_email_key")
  @@index([addressId], map: "user_address_key")
  @@map("users")
}

model RouterLocations {
  locationId Int       @id @default(autoincrement()) @map("location_id")
  routerId   Int       @unique @map("router_id")
  longitude  Float     @map("router_logitude")
  latitude   Float     @map("router_latitude")
  dateTime   DateTime
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  router     Routers   @relation(fields: [routerId], references: [routerId])

  @@index([routerId])
  @@map("router_locations")
}

model Address {
  userId       Int       @unique @map("user_id")
  city         String    @db.VarChar(50)
  state        String    @db.VarChar(50)
  zip          Int
  country      String    @db.VarChar(100)
  addressId    Int       @id @default(autoincrement()) @map("address_id")
  addressLine1 String    @map("address_line_1") @db.VarChar(50)
  addressLine2 String    @map("address_line_2") @db.VarChar(50)
  createdAt    DateTime  @default(now()) @map("created_at")
  deletedAt    DateTime? @map("deleted_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  user         User      @relation("UserAddress", fields: [userId], references: [userId])
  Account      Account?

  @@index([userId])
  @@map("addresses")
}

model TealRequest {
  requestId String     @id @default(nanoid())
  status    TealStatus @default(PENDING)
  type      String

  @@map("teal_request")
}

enum TealStatus {
  SUCCEEDED
  PENDING
}

enum Roles {
  SUPER_ADMIN
  ADMIN
  USER
}

enum SimStatus {
  ACTIVE
  DEACTIVATED
  SUSPENDED
  PREACTIVE
  PENDING
  UNKNOWN
  UNACTIVATED
  WAITING
}
